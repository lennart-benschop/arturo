// // *******************************************************************************************************************************
// //
// //				This table is a mapping of GFXKEY_ values (0-127) to SDLK_Values (can be anything.)
// //
// // *******************************************************************************************************************************

// static int keyTable[] = {
// 	GFXKEY_UP,SDLK_UP, GFXKEY_DOWN,SDLK_DOWN, GFXKEY_LEFT,SDLK_LEFT, GFXKEY_RIGHT,SDLK_RIGHT,
// 	GFXKEY_RETURN,SDLK_RETURN,GFXKEY_BACKSPACE,SDLK_BACKSPACE,GFXKEY_TAB,SDLK_TAB,
// 	GFXKEY_LSHIFT,SDLK_LSHIFT,GFXKEY_RSHIFT,SDLK_RSHIFT,GFXKEY_SHIFT,-1,GFXKEY_CONTROL,SDLK_LCTRL,
// 	GFXKEY_ALT,SDLK_LALT, GFXKEY_ALTGR, SDLK_RALT,

// 	GFXKEY_F1,SDLK_F1, GFXKEY_F2,SDLK_F2, GFXKEY_F3,SDLK_F3, GFXKEY_F4,SDLK_F4, GFXKEY_F5,SDLK_F5, 
// 	GFXKEY_F6,SDLK_F6, GFXKEY_F7,SDLK_F7, GFXKEY_F8,SDLK_F8, GFXKEY_F9,SDLK_F9, 
// 	GFXKEY_F10,SDLK_F10, GFXKEY_F11,SDLK_F11, GFXKEY_F12,SDLK_F12,

// 	'A',SDLK_a, 'B',SDLK_b, 'C',SDLK_c, 'D',SDLK_d, 'E',SDLK_e, 'F',SDLK_f, 'G',SDLK_g, 'H',SDLK_h, 'I',SDLK_i,
// 	'J',SDLK_j, 'K',SDLK_k, 'L',SDLK_l, 'M',SDLK_m, 'N',SDLK_n, 'O',SDLK_o, 'P',SDLK_p, 'Q',SDLK_q, 'R',SDLK_r,
// 	'S',SDLK_s, 'T',SDLK_t, 'U',SDLK_u, 'V',SDLK_v, 'W',SDLK_w, 'X',SDLK_x, 'Y',SDLK_y, 'Z',SDLK_z,

// 	'0',SDLK_0, '1',SDLK_1, '2',SDLK_2, '3',SDLK_3, '4',SDLK_4, '5',SDLK_5, '6',SDLK_6, '7',SDLK_7, '8',SDLK_8, '9',SDLK_9,

// 	'-',SDLK_MINUS,'\\',SDLK_BACKSLASH,'@',SDLK_QUOTE,'[',SDLK_LEFTBRACKET,']',SDLK_RIGHTBRACKET,';',SDLK_SEMICOLON,':',SDLK_COLON,
// 	'.',SDLK_PERIOD,',',SDLK_COMMA,'/',SDLK_SLASH,'#',SDLK_HASH,'=',SDLK_EQUALS,' ',SDLK_SPACE,

// -1 };

// // *******************************************************************************************************************************
// //
// //													Handles Key State
// //
// // *******************************************************************************************************************************

// struct _KeyRecord {
// 	int 	sdlKey;																	// Key representation in SDL.
// 	int 	gfxKey;																	// Key representation in GFX. (same as array index)
// 	int 	isPressed;																// Non zero if is pressed.
// };

// static struct _KeyRecord keyState[128];												// Array of key state records.

// static void _GFXInitialiseKeyRecord(void) {
// 	for (int i = 0;i < 128;i++) {													// Erase the whole structure.
// 		keyState[i].sdlKey = keyState[i].gfxKey = keyState[i].isPressed = 0;
// 	}
// 	int n = 0;
// 	while (keyTable[n] != -1) {														// Scan the list of known keys.
// 		keyState[keyTable[n]].gfxKey = keyTable[n];									// Save gfx number of the key.
// 		keyState[keyTable[n]].sdlKey = keyTable[n+1];								// Save the corresponding SDL key.
// 		n = n + 2;
// 	}
// }

// static void _GFXUpdateKeyRecord(int scancode,int isDown) {
// 	for (int i = 0;i < 128;i++)														// Find key with corresponding scan code
// 		if (keyState[i].sdlKey == scancode)
// 			keyState[i].isPressed = (isDown != 0);									// Copy state into it.
// 	keyState[GFXKEY_SHIFT].isPressed = 												// Either shift key operates SHIFT.
// 					keyState[GFXKEY_LSHIFT].isPressed || keyState[GFXKEY_RSHIFT].isPressed;
// }

// // *******************************************************************************************************************************
// //
// //											Check to see if key is pressed.
// //
// // *******************************************************************************************************************************

// int  GFXIsKeyPressed(int character) {
// 	if (character >= 'a' && character <= 'z') character = character - 'a' + 'A';	// Make lower case upper case
// 	return keyState[character].isPressed;							
// }

// // *******************************************************************************************************************************
// //
// //												Convert character to ASCII
// //
// //	UK Keyboard layout, will probably behave bizarrely elsewhere.
// // *******************************************************************************************************************************

// int  GFXToASCII(int ch,int applyModifiers) {
// 	if (ch >= ' ' && ch < 127) {													// Legitimate key.
// 		ch = tolower(ch);
// 		if (ch == '@') ch = '\'';													// @ is actually '
// 		if (applyModifiers != 0) {
// 			if (GFXIsKeyPressed(GFXKEY_SHIFT)) {
// 				switch(ch) {
// 					case '\'':	ch = '@';break;
// 					case '-':	ch = '_';break;
// 					case '#':	ch = '~';break;
// 					case '=':	ch = '+';break;
// 					case ';':	ch = ':';break;
// 					case '6':	ch = '^';break;
// 					case '7':	ch = '&';break;
// 					case '8':	ch = '*';break;
// 					case '9':	ch = '(';break;
// 					case '0':	ch = ')';break;
// 					default:	ch = ch ^ ((ch < 64) ? 0x10:0x20);break;
// 				}
// 			}
// 			if (GFXIsKeyPressed(GFXKEY_CONTROL)) ch = ch & 31;						// Handle control
// 		}

// 	} else {
// 		switch (ch) {																// Control characters
// 			case GFXKEY_TAB:		ch = 0x09;break;								// Handle TAB, Backspace and CR.
// 			case GFXKEY_RETURN:		ch = 0x0D;break;
// 			case GFXKEY_BACKSPACE:	ch = 0x7F;break;
// 			case GFXKEY_LEFT:		ch = 0x08;break;								// Arrow keys, Apple ][ mapping
// 			case GFXKEY_RIGHT:		ch = 0x15;break;
// 			case GFXKEY_UP:			ch = 0x0B;break;
// 			case GFXKEY_DOWN:		ch = 0x0A;break;
// 			default:				ch = 0x00;break;

// 		}
// 	}
// 	return ch;
// }
